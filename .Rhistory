geom_point() +
theme(text = element_text(size = 20)) +
ggtitle("Test Title")
sjPlot::save_plot('./figures.svg', fig = p, width = 30, height = 20)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme(text = element_text(size = 20)) +
ggtitle("Test Title")
sjPlot::save_plot('./figures.svg', fig = p, width = 30, height = 20)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme(text = element_text(size = 12)) +
ggtitle("Test Title")
sjPlot::save_plot('./figures.svg', fig = p, width = 30, height = 20)
###########################################################################################
### SAMSARA - Loading Set of analyses data and preparing for plotting                   ###
###########################################################################################
options(bitmapType = "Xlib")
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(5.,4)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### SAMSARA - Loading Set of analyses data and preparing for plotting                   ###
###########################################################################################
options(bitmapType = "Xlib")
###########################################################################################
### ggplot2 plotting modifications
# Control font sizes
sml_font <- 8
med_font <- 10
big_font <- 11
font_size_control <- theme(text=element_text(size=sml_font), #change font size of all text
axis.text=element_text(size=sml_font), #change font size of axis text
axis.title=element_text(size=med_font), #change font size of axis titles
plot.title=element_text(size=big_font), #change font size of plot title
legend.text=element_text(size=med_font), #change font size of legend text
legend.title=element_text(size=med_font)) #change font size of legend title
# Remove axes and legend if necessary
cxy <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),
axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank())
cxyl <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),
axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),legend.position = "none")
cx <- theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank())
cxl <- theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),legend.position = "none")
cy <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank())
cyl <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),legend.position = "none")
cl <- theme(legend.position = "none")
###########################################################################################
### Get info about quartiles in BC resource preference data
get_Qs <- function(bcdm, r_num) {
mean_Q1 <- c()
mean_Q3 <- c()
for (r in r_num) {
bcdmr <- bcdm[bcdm$repl == r,]
mean_Q1 <- c(mean_Q1, quantile(as.numeric(bcdmr[lower.tri(bcdmr)]), c(.25)))
mean_Q3 <- c(mean_Q3, quantile(as.numeric(bcdmr[lower.tri(bcdmr)]), c(.75)))
}
bc_thr_neg <- mean(mean_Q1)           # Lower threshold for testing predictions
bc_thr_pos <- mean(mean_Q3)           # Upper threshold for testing predictions
res <- c(bc_thr_neg,bc_thr_pos)
return(res)
}
###########################################################################################
### Plotting colours and parameters:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
multipl_q = (((10*10)-10)/2)*0.25
multipl_posint = 4
multipl_negint = 16
boxalpha = 0.8
boxcolor = 'white'
titltxt <- 'blank'
hnum <- 25
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(5.,4)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/community_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Alternative scenarios (Plots A, B, C, D)
colpal <- c('#22394AFF', '#AE2565FF','#33C6BBFF', '#666666FF')
sim_nms <- c('as1','as2','as3','rs3')
symbolvals <- c(5,1,3,4) #6,2,5,4,0,3)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_alternative.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/community_alternative.svg', fig = p, width = 30, height = 20)
###########################################################################################
### SAMSARA - Loading Set of analyses data and preparing for plotting                   ###
###########################################################################################
options(bitmapType = "Xlib")
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/community_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Alternative scenarios (Plots A, B, C, D)
colpal <- c('#22394AFF', '#AE2565FF','#33C6BBFF', '#666666FF')
sim_nms <- c('as1','as2','as3','rs3')
symbolvals <- c(5,1,3,4) #6,2,5,4,0,3)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_alternative.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/community_alternative.svg', fig = p, width = 30, height = 20)
p
###########################################################################################
### SAMSARA - Loading Set of analyses data and preparing for plotting                   ###
###########################################################################################
options(bitmapType = "Xlib")
### Read libraries
library(ggplot2)
library(dplyr)
library(reshape2)
library(cowplot)
library(colorspace)
library(shades)
library(ggh4x)
library(ggpattern)
library(sjPlot)
library(latex2exp)
library(eulerr)
library(stringr)
library(rlang)
library(igraph)
library(ggraph)
library(tidygraph)
library(patchwork)
###########################################################################################
### Here we load all of the data analysis functions that are contained in scripts within the folder './Load_analysis_functions'
for (i in list.files(path=('./analysis_scripts/plot_functions'),full.names=TRUE)) {
source(i)
}
###########################################################################################
##### Fig.4: Sampling volume                                                          #####
###########################################################################################
pd_cub <- read.csv(paste0('./analysis_data/fig4/infm_res_compiled.csv'))
fd_cub <- read.csv(paste0('./analysis_data/fig4/full_res_compiled.csv'))
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/community_rscdist.svg', fig = p, width = 30, height = 20)
getOption("bitmapType")
capabilities("cairo")
grDevices::dev.cur()
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### SAMSARA - Loading Set of analyses data and preparing for plotting                   ###
###########################################################################################
#options(bitmapType = "Xlib")
###########################################################################################
### ggplot2 plotting modifications
# Control font sizes
sml_font <- 8
med_font <- 10
big_font <- 11
font_size_control <- theme(text=element_text(size=sml_font), #change font size of all text
axis.text=element_text(size=sml_font), #change font size of axis text
axis.title=element_text(size=med_font), #change font size of axis titles
plot.title=element_text(size=big_font), #change font size of plot title
legend.text=element_text(size=med_font), #change font size of legend text
legend.title=element_text(size=med_font)) #change font size of legend title
###########################################################################################
### Save as .svg wrapper:
save_plot_with_pointsize <- function(file, fig, width, height, pointsize = 10) {
# Convert cm to inches for svglite
width_in <- width / 2.54
height_in <- height / 2.54
svglite::svglite(filename = file, width = width_in, height = height_in, pointsize = pointsize)
print(fig)
dev.off()
}
# Remove axes and legend if necessary
cxy <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),
axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank())
cxyl <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),
axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),legend.position = "none")
cx <- theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank())
cxl <- theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),legend.position = "none")
cy <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank())
cyl <- theme(axis.text.y = element_blank(),axis.ticks.y = element_blank(),axis.title.y = element_blank(),legend.position = "none")
cl <- theme(legend.position = "none")
###########################################################################################
### Get info about quartiles in BC resource preference data
get_Qs <- function(bcdm, r_num) {
mean_Q1 <- c()
mean_Q3 <- c()
for (r in r_num) {
bcdmr <- bcdm[bcdm$repl == r,]
mean_Q1 <- c(mean_Q1, quantile(as.numeric(bcdmr[lower.tri(bcdmr)]), c(.25)))
mean_Q3 <- c(mean_Q3, quantile(as.numeric(bcdmr[lower.tri(bcdmr)]), c(.75)))
}
bc_thr_neg <- mean(mean_Q1)           # Lower threshold for testing predictions
bc_thr_pos <- mean(mean_Q3)           # Upper threshold for testing predictions
res <- c(bc_thr_neg,bc_thr_pos)
return(res)
}
###########################################################################################
### Plotting colours and parameters:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
multipl_q = (((10*10)-10)/2)*0.25
multipl_posint = 4
multipl_negint = 16
boxalpha = 0.8
boxcolor = 'white'
titltxt <- 'blank'
hnum <- 25
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Save as .svg wrapper:
save_svg <- function(file, fig, width, height, pointsize = 10) {
# Convert cm to inches for svglite
width_in <- width / 2.54
height_in <- height / 2.54
svglite::svglite(filename = file, width = width_in, height = height_in, pointsize = pointsize)
print(fig)
dev.off()
}
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
###########################################################################################
### ggplot2 plotting modifications
# Control font sizes
sml_font <- 8
med_font <- 10
big_font <- 12
font_size_control <- theme(text=element_text(size=sml_font), #change font size of all text
axis.text=element_text(size=sml_font), #change font size of axis text
axis.title=element_text(size=med_font), #change font size of axis titles
plot.title=element_text(size=big_font), #change font size of plot title
legend.text=element_text(size=med_font), #change font size of legend text
legend.title=element_text(size=med_font)) #change font size of legend title
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
p
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
###########################################################################################
##### Fig.4: Sampling volume                                                          #####
###########################################################################################
pd_cub <- read.csv(paste0('./analysis_data/fig4/infm_res_compiled.csv'))
fd_cub <- read.csv(paste0('./analysis_data/fig4/full_res_compiled.csv'))
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/community_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Alternative scenarios (Plots A, B, C, D)
colpal <- c('#22394AFF', '#AE2565FF','#33C6BBFF', '#666666FF')
sim_nms <- c('as1','as2','as3','rs3')
symbolvals <- c(5,1,3,4) #6,2,5,4,0,3)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_alternative.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/community_alternative.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Save as .svg wrapper:
save_svg <- function(file, fig, width, height, pointsize = 10) {
# Convert cm to inches for svglite
width_in <- width / 2.54
height_in <- height / 2.54
Cairo::CairoSVG(filename = file, width = width_in, height = height_in, pointsize = pointsize)
print(fig)
dev.off()
}
###########################################################################################
##### Fig.4: Sampling volume                                                          #####
###########################################################################################
pd_cub <- read.csv(paste0('./analysis_data/fig4/infm_res_compiled.csv'))
fd_cub <- read.csv(paste0('./analysis_data/fig4/full_res_compiled.csv'))
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/community_rscdist.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Alternative scenarios (Plots A, B, C, D)
colpal <- c('#22394AFF', '#AE2565FF','#33C6BBFF', '#666666FF')
sim_nms <- c('as1','as2','as3','rs3')
symbolvals <- c(5,1,3,4) #6,2,5,4,0,3)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/cooccurrence_alternative.svg', fig = p, width = 30, height = 20)
p <- community_plots(fd_cub, sim_nms, colpal, symbolvals)
save_svg('./figures/main_manuscript/fig4/plots/community_alternative.svg', fig = p, width = 30, height = 20)
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20, base_font_size = 10)
###########################################################################################
### Main: Resource distributions (Plots A, B, C, D)
plotdims <- c(4.,3)
colpal <- c('#000000FF', '#999999FF', '#CCCCCCFF', '#666666FF')
sim_nms <- c('rc1', 'rs1', 'rs2', 'rs3')
symbolvals <- c(0,2,6,5)
p <- coocurrence_plots(pd_cub, sim_nms, colpal, symbolvals)
sjPlot::save_plot('./figures/main_manuscript/fig4/plots/cooccurrence_rscdist.svg', fig = p, width = 30, height = 20, base_font_size = 10)
###########################################################################################
### Test with data variation
pdc <- pd_cub[pd_cub$treatment %in% sim_nms,]
pdc$dim <- as.numeric(unlist(strsplit(unlist(strsplit(pdc$d, '__'))[2*(1:length(pdc$d))], '_'))[2*(1:length(pdc$d))])
pdc
ggplot(pdc, aes(x = dim, y = totp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_line() +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = "")) + ylim(0,13) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Positive\nco-occurrences') + #scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
pdc
ggplot(pdc, aes(x = dim, y = totp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_line() + geom_ribbon(ymin = totp - totp_sd, ymax = totp + totp_sd) +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Positive\nco-occurrences') + #scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
###########################################################################################
### Test with data variation
pdc <- pd_cub[pd_cub$treatment %in% sim_nms,]
pdc$dim <- as.numeric(unlist(strsplit(unlist(strsplit(pdc$d, '__'))[2*(1:length(pdc$d))], '_'))[2*(1:length(pdc$d))])
ggplot(pdc, aes(x = dim, y = totp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_line() + geom_ribbon(ymin = totp - totp_sd, ymax = totp + totp_sd) +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Positive\nco-occurrences') + #scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pdc, aes(x = dim, y = totp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_line() + geom_ribbon(aes(ymin = totp - totp_sd, ymax = totp + totp_sd)) +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Positive\nco-occurrences') + #scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pdc, aes(x = dim, y = totp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_ribbon(aes(ymin = totp - totp_sd, ymax = totp + totp_sd), alpha = 0.1) +
geom_line() +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Positive\nco-occurrences') + #scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pdc, aes(x = dim, y = intp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_ribbon(aes(ymin = totp - totp_sd, ymax = totp + totp_sd), alpha = 0.1) +
geom_line() + geom_hline(yintercept = nintp/45, linetype = "dashed") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Precision') +# scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pdc, aes(x = dim, y = intp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_ribbon(aes(ymin = intp - intp_sd, ymax = intp + intp_sd), alpha = 0.1) +
geom_line() + geom_hline(yintercept = nintp/45, linetype = "dashed") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Precision') +# scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
###########################################################################################
### Test with data variation
pdc <- pd_cub[pd_cub$treatment %in% sim_nms,]
pdc$dim <- as.numeric(unlist(strsplit(unlist(strsplit(pdc$d, '__'))[2*(1:length(pdc$d))], '_'))[2*(1:length(pdc$d))])
ggplot(pdc, aes(x = dim, y = intp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_ribbon(aes(ymin = intp - intp_sd, ymax = intp + intp_sd), alpha = 0.1) +
geom_line() + geom_hline(yintercept = nintp/45, linetype = "dashed") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Precision') +# scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
nintp = 4
ggplot(pdc, aes(x = dim, y = intp, col = treatment, group = treatment, fill = treatment, shape = treatment)) +
geom_ribbon(aes(ymin = intp - intp_sd, ymax = intp + intp_sd), alpha = 0.1) +
geom_line() + geom_hline(yintercept = nintp/45, linetype = "dashed") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, big.mark = "")) +
geom_point(size = 1, stroke = 1) + theme_classic() +
xlab(TeX('Composite sample side length l')) + ylab('Precision') +# scale_x_log10() +
scale_shape_manual(values = symbolvals, name = 'Resource\ndistribution\nscenarios') +
scale_color_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_fill_manual(values = colpal, name = 'Resource\ndistribution\nscenarios') +
scale_x_continuous(breaks = c(0, seq(0.1, 0.3, by = 0.1)), labels = c("Habitat", seq(0.1, 0.3, by = 0.1))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
