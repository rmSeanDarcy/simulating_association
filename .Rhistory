source(i)
}
###########################################################################################
### Here we load all of the data analysis functions that are contained in scripts within the folder './Load_collectfunctions'
workdir <- '/home/swani/Documents/computational_research_tools/homework4/SAMSARA'
setwd(workdir)
for (i in list.files(path= paste(workdir,c('/simulation_code/Load_plot_functions'),sep=''), full.names=TRUE)) {
source(i)
}
###########################################################################################
##### Load output data
pd_hab <- read.csv(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'/exp_results.csv'))
### For testing
workdir <- '/home/swani/Documents/computational_research_tools/homework4/SAMSARA'
parent_set_of_analyses <- 'Fig2'
###########################################################################################
### Here we load all of the data analysis functions that are contained in scripts within the folder './Load_collectfunctions'
setwd(workdir)
for (i in list.files(path= paste(workdir,c('/simulation_code/Load_plot_functions'),sep=''), full.names=TRUE)) {
source(i)
}
###########################################################################################
##### Load output data
pd_hab <- read.csv(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'/exp_results.csv'))
###########################################################################################
### Plotting settings:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
pd_hab
###########################################################################################
### Plotting settings:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
#
multipl_q = (((10*10)-10)/2)*0.25
multipl_posint = 4
multipl_negint = 16
boxalpha = 0.8
boxcolor = 'white'
sml_font <- 8
med_font <- 10
big_font <- 11
titltxt <- 'hi'
hnum <- 25
plotdims = c(4,4)
###########################################################################################
##### Fig.2 B,C) Matching co-occurrences                                              #####
p <- plot_match_allruns_eucintp(pd_hab,label_mode = 'none',titltxt = 'plot_match_allruns_eucintp',hnum, plotdims = c(4,4))
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA')]
pd_haby
rownames(pd_haby) <- pd_hab$run_nm
pd_haby
# intp_corA = Precision for co-occurrences matching mutualism (without intersection with preference similarity)
# eucp_corA = Precision for co-occurrences matching preference similarity (without intersection with mutualsim)
# eucintp_corA = Precision for co-occurrences matching intersection preference similarity and mutualsim
# unxpA = Remaining 'precision' for co-occurrences that don't match either
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c2',]$eucp_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c1',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$intp_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$eucintp_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucp_corA <- 0
pdy <- as.data.frame(melt(t(pd_haby)))
pd <- c()
for (i in unique(pdy$Var2)) {
pdyx <- pdy[pdy$Var2 == i,]
pd <- rbind(pd, pdyx[c(2,3,1,4),])
}
colnames(pd) <- c('matches','rscdist','perc')
pd
comp <- as.data.frame(cbind(c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA'), c('RP', 'Int', 'RP & Int', 'Rest')))
pd$lab <- comp[match(pd$matches,comp$V1),]$V2
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
pd$perc_n <- pd$perc*pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
sumsx <- c()
for (i in unique(pd$rscdist)) {
sumsx <- c(sumsx,sum(pd[pd$rscdist == i,]$perc_n))
}
pd$lab <- factor(pd$lab, levels = c('Rest', 'RP', 'RP & Int', 'Int'))
levels(pd$lab)[levels(pd$lab)=="Rest"] <- "Rest"
levels(pd$lab)[levels(pd$lab)=="RP"] <- "Resource pref.\nsimilarity"
levels(pd$lab)[levels(pd$lab)=="Int"] <- "Interactions"
levels(pd$lab)[levels(pd$lab)=="RP & Int"] <- "Resource pref.\nsimilarity and\ninteractions"
pd$rscdist
pd$rscdist <- factor(pd$rscdist, levels = c('s1', 'c1', 'c2', 's2', 's3', 's4', 's5')) #, 'cf'
levels(pd$rscdist)[levels(pd$rscdist)=='c1'] <- 'Interactions only'
levels(pd$rscdist)[levels(pd$rscdist)=='c2'] <- 'Environment only'
levels(pd$rscdist)[levels(pd$rscdist)=='s1'] <- 'Environment & Interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s4'] <- 'Sampling noise'
levels(pd$rscdist)[levels(pd$rscdist)=='s2'] <- 'Equal interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s5'] <- 'Random extinctions (20%)'
levels(pd$rscdist)[levels(pd$rscdist)=='s3'] <- 'Resources anti-correlated'
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
install.packages('ggpattern')
install.packages("ggpattern")
library(ggpattern)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
install.packages('rlang')
install.packages("rlang")
library(rlang)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
scale_pattern_manual
?scale_pattern_manual
library(ggpattern)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
library(rlang)
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
###########################################################################################
### SAMSARA - Figure 2 and plots for related Supporting information                     ###
###########################################################################################
### Read libraries
library(ggplot2)
library(dplyr)
library(reshape2)
library(cowplot)
library(colorspace)
library(shades)
library(ggh4x)
library(ggpattern)
library(sjPlot)
library(latex2exp)
library(eulerr)
library(stringr)
library(rlang)
### For testing
workdir <- '/home/swani/Documents/computational_research_tools/homework4/SAMSARA'
parent_set_of_analyses <- 'Fig2'
###########################################################################################
### Here we load all of the data analysis functions that are contained in scripts within the folder './Load_collectfunctions'
setwd(workdir)
for (i in list.files(path= paste(workdir,c('/simulation_code/Load_plot_functions'),sep=''), full.names=TRUE)) {
source(i)
}
###########################################################################################
##### Load output data
pd_hab <- read.csv(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'/exp_results.csv'))
###########################################################################################
### Plotting settings:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
#
multipl_q = (((10*10)-10)/2)*0.25
multipl_posint = 4
multipl_negint = 16
boxalpha = 0.8
boxcolor = 'white'
sml_font <- 8
med_font <- 10
big_font <- 11
titltxt <- 'hi'
hnum <- 25
plotdims = c(4,4)
###########################################################################################
##### Fig.2 B,C) Matching co-occurrences                                              #####
p <- plot_match_allruns_eucintp(pd_hab,label_mode = 'none',titltxt = 'plot_match_allruns_eucintp',hnum, plotdims = c(4,4))
p
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA')]
rownames(pd_haby) <- pd_hab$run_nm
# intp_corA = Precision for co-occurrences matching mutualism (without intersection with preference similarity)
# eucp_corA = Precision for co-occurrences matching preference similarity (without intersection with mutualsim)
# eucintp_corA = Precision for co-occurrences matching intersection preference similarity and mutualsim
# unxpA = Remaining 'precision' for co-occurrences that don't match either
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c2',]$eucp_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c1',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$intp_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$eucintp_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucp_corA <- 0
pdy <- as.data.frame(melt(t(pd_haby)))
pd <- c()
for (i in unique(pdy$Var2)) {
pdyx <- pdy[pdy$Var2 == i,]
pd <- rbind(pd, pdyx[c(2,3,1,4),])
}
colnames(pd) <- c('matches','rscdist','perc')
comp <- as.data.frame(cbind(c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA'), c('RP', 'Int', 'RP & Int', 'Rest')))
pd$lab <- comp[match(pd$matches,comp$V1),]$V2
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
pd$perc_n <- pd$perc*pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
sumsx <- c()
for (i in unique(pd$rscdist)) {
sumsx <- c(sumsx,sum(pd[pd$rscdist == i,]$perc_n))
}
pd$lab <- factor(pd$lab, levels = c('Rest', 'RP', 'RP & Int', 'Int'))
levels(pd$lab)[levels(pd$lab)=="Rest"] <- "Rest"
levels(pd$lab)[levels(pd$lab)=="RP"] <- "Resource pref.\nsimilarity"
levels(pd$lab)[levels(pd$lab)=="Int"] <- "Interactions"
levels(pd$lab)[levels(pd$lab)=="RP & Int"] <- "Resource pref.\nsimilarity and\ninteractions"
pd$rscdist <- factor(pd$rscdist, levels = c('s1', 'c1', 'c2', 's2', 's3', 's4', 's5')) #, 'cf'
levels(pd$rscdist)[levels(pd$rscdist)=='c1'] <- 'Interactions only'
levels(pd$rscdist)[levels(pd$rscdist)=='c2'] <- 'Environment only'
levels(pd$rscdist)[levels(pd$rscdist)=='s1'] <- 'Environment & Interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s4'] <- 'Sampling noise'
levels(pd$rscdist)[levels(pd$rscdist)=='s2'] <- 'Equal interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s5'] <- 'Random extinctions (20%)'
levels(pd$rscdist)[levels(pd$rscdist)=='s3'] <- 'Resources anti-correlated'
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
pd
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA')]
rownames(pd_haby) <- pd_hab$run_nm
# intp_corA = Precision for co-occurrences matching mutualism (without intersection with preference similarity)
# eucp_corA = Precision for co-occurrences matching preference similarity (without intersection with mutualsim)
# eucintp_corA = Precision for co-occurrences matching intersection preference similarity and mutualsim
# unxpA = Remaining 'precision' for co-occurrences that don't match either
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c2',]$eucp_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c1',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$intp_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$eucintp_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucp_corA <- 0
pd_haby
pdy <- as.data.frame(melt(t(pd_haby)))
pd <- c()
for (i in unique(pdy$Var2)) {
pdyx <- pdy[pdy$Var2 == i,]
pd <- rbind(pd, pdyx[c(2,3,1,4),])
}
pd
colnames(pd) <- c('matches','rscdist','perc')
comp <- as.data.frame(cbind(c('eucp_corA', 'intp_corA', 'eucintp_corA', 'unxpA'), c('RP', 'Int', 'RP & Int', 'Rest')))
pd$lab <- comp[match(pd$matches,comp$V1),]$V2
pd
pd$lab
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
pd
pd_hab
pd$rscdist
pd_hab$rscdist
pd_hab
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$run_nm),]$totp
pd
pd$perc_n <- pd$perc*pd_hab[match(pd$rscdist,pd_hab$rscdist),]$totp
pd
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$run_nm),]$totp
pd$perc_n <- pd$perc*pd_hab[match(pd$rscdist,pd_hab$run_nm),]$totp
pd
sumsx <- c()
for (i in unique(pd$rscdist)) {
sumsx <- c(sumsx,sum(pd[pd$rscdist == i,]$perc_n))
}
pd$lab <- factor(pd$lab, levels = c('Rest', 'RP', 'RP & Int', 'Int'))
levels(pd$lab)[levels(pd$lab)=="Rest"] <- "Rest"
levels(pd$lab)[levels(pd$lab)=="RP"] <- "Resource pref.\nsimilarity"
levels(pd$lab)[levels(pd$lab)=="Int"] <- "Interactions"
levels(pd$lab)[levels(pd$lab)=="RP & Int"] <- "Resource pref.\nsimilarity and\ninteractions"
pd$rscdist <- factor(pd$rscdist, levels = c('s1', 'c1', 'c2', 's2', 's3', 's4', 's5')) #, 'cf'
levels(pd$rscdist)[levels(pd$rscdist)=='c1'] <- 'Interactions only'
levels(pd$rscdist)[levels(pd$rscdist)=='c2'] <- 'Environment only'
levels(pd$rscdist)[levels(pd$rscdist)=='s1'] <- 'Environment & Interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s4'] <- 'Sampling noise'
levels(pd$rscdist)[levels(pd$rscdist)=='s2'] <- 'Equal interactions'
levels(pd$rscdist)[levels(pd$rscdist)=='s5'] <- 'Random extinctions (20%)'
levels(pd$rscdist)[levels(pd$rscdist)=='s3'] <- 'Resources anti-correlated'
ggplot(pd, aes(y=perc_n, x=rscdist, fill = lab)) + #, col = lab
geom_bar(position="stack", stat="identity", lwd = 0) +
theme_bw() + xlab('Scenarios') + ylab('Positive\nassociations') +
scale_fill_manual(values = c(rest_col,euc_col,eucint_col,int_col), name = 'Association\nmatches:') +
#scale_color_manual(values = c(darken(rest_col, darkfac),darken(euc_col, darkfac),darken(eucint_col, darkfac),darken(int_col, darkfac)), name = 'Association\nmatches:') +
scale_pattern_manual('stack', values = c('none','none','stripe','none'), guide = "none") +
geom_col_pattern(aes(pattern = lab),pattern_color = NA,
pattern_size = 1,pattern_density = .5,pattern_spacing = .075,pattern_fill = int_col,color = NA) +
guides(fill = guide_legend(override.aes = list(pattern = c("none", "none", "stripe", "none")))) + #guides(fill=guide_legend(override.aes=list(pattern="none"))) +
#theme(axis.text.x=element_text(angle=45)) +
#scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip() + scale_x_discrete(limits = rev(levels(pd$rscdist))) +
force_panelsizes(rows = unit(plotdims[1], "cm"),cols = unit(plotdims[2], "cm")) + font_size_control + ggtitle(titltxt)
sjPlot::save_plot(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'Fig2_B.pdf'), fig = p)
library(sjPlot)
install.packages('sjPlot')
library(sjPlot)
sjPlot::save_plot(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'Fig2_B.pdf'), fig = p)
sjPlot::save_plot(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'Fig2_B.svg'), fig = p)
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$rscdist
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c2',]$eucp_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c1',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$intp_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby[rownames(pd_haby) == 'c1',]$eucintp_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucp_corA <- 0
pdy <- as.data.frame(melt(t(pd_haby)))
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$rscdist
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c2',]$eucp_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucp
pd_haby[rownames(pd_haby) == 'c1',]$unxpA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intp
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$rscdist
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c2',]$eucn_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c1',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$intn_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$eucintn_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucn_corA <- 0
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$rscdist
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c2',]$eucn_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c1',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$intn_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$run_nm
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c2',]$eucn_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c1',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$intn_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$eucintn_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucn_corA <- 0
pd_haby
###########################################################################################
### SAMSARA - Figure 2 and plots for related Supporting information                     ###
###########################################################################################
### Read libraries
library(ggplot2)
library(dplyr)
library(reshape2)
library(cowplot)
library(colorspace)
library(shades)
library(ggh4x)
library(ggpattern)
library(sjPlot)
library(latex2exp)
library(eulerr)
library(stringr)
library(rlang)
### For testing
workdir <- '/home/swani/Documents/computational_research_tools/homework4/SAMSARA'
parent_set_of_analyses <- 'Fig2'
###########################################################################################
### Here we load all of the data analysis functions that are contained in scripts within the folder './Load_collectfunctions'
setwd(workdir)
for (i in list.files(path= paste(workdir,c('/simulation_code/Load_plot_functions'),sep=''), full.names=TRUE)) {
source(i)
}
###########################################################################################
##### Load output data
pd_hab <- read.csv(paste0(workdir,'/Result_master_dir/',parent_set_of_analyses,'/exp_results.csv'))
###########################################################################################
### Plotting settings:
int_col <- '#ffa500ff'    #'#F1DAFFFF'
eucint_col <- '#008080ff'
euc_col <- '#008080ff'
rest_col <- '#D1D3D2FF'
#
multipl_q = (((10*10)-10)/2)*0.25
multipl_posint = 4
multipl_negint = 16
boxalpha = 0.8
boxcolor = 'white'
sml_font <- 8
med_font <- 10
big_font <- 11
titltxt <- 'hi'
hnum <- 25
plotdims = c(4,4)
###########################################################################################
##### Fig.2 B,C) Matching co-occurrences                                              #####
p <- plot_match_allruns_eucintp(pd_hab,label_mode = 'none',titltxt = 'plot_match_allruns_eucintp',hnum, plotdims = c(4,4))
p
p <- plot_match_allruns_eucintn(pd_hab,label_mode = 'none',titltxt = 'plot_match_allruns_eucintn',hnum, plotdims = c(4,4))
p
pd_haby <- pd_hab[colnames(pd_hab) %in% c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA')]
rownames(pd_haby) <- pd_hab$run_nm
### For individual driver runs the unexplained needs to be adjusted!
pd_haby[rownames(pd_haby) == 'c2',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c2',]$eucn_corA <- pd_hab[rownames(pd_haby) == 'c2',]$eucn
pd_haby[rownames(pd_haby) == 'c1',]$unxnA <- 1-pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$intn_corA <- pd_hab[rownames(pd_haby) == 'c1',]$intn
pd_haby[rownames(pd_haby) == 'c1',]$eucintn_corA <- 0
pd_haby[rownames(pd_haby) == 'c1',]$eucn_corA <- 0
pdy <- as.data.frame(melt(t(pd_haby)))
pdy
pd <- c()
for (i in unique(pdy$Var2)) {
pdyx <- pdy[pdy$Var2 == i,]
pd <- rbind(pd, pdyx[c(2,3,1,4),])
}
colnames(pd) <- c('matches','rscdist','perc')
comp <- as.data.frame(cbind(c('eucn_corA', 'intn_corA', 'eucintn_corA', 'unxnA'), c('RP', 'Int', 'RP & Int', 'Rest')))
pd$lab <- comp[match(pd$matches,comp$V1),]$V2
pd$n_assoc <- pd_hab[match(pd$rscdist,pd_hab$run_nm),]$totn
pd$perc_n <- pd$perc*pd_hab[match(pd$rscdist,pd_hab$run_nm),]$totn
sumsx <- c()
for (i in unique(pd$rscdist)) {
sumsx <- c(sumsx,sum(pd[pd$rscdist == i,]$perc_n))
}
pd$lab <- factor(pd$lab, levels = c('Rest', 'RP', 'RP & Int', 'Int'))
levels(pd$lab)[levels(pd$lab)=="Rest"] <- "Rest"
levels(pd$lab)[levels(pd$lab)=="RP"] <- "Resource pref.\nsimilarity"
levels(pd$lab)[levels(pd$lab)=="Int"] <- "Interactions"
levels(pd$lab)[levels(pd$lab)=="RP & Int"] <- "Resource pref.\nsimilarity and\ninteractions"
pd$rscdist <- factor(pd$rscdist, levels = c('s1', 'c1', 'c2', 's2', 's3', 's4', 's5')) #, 'cf'
