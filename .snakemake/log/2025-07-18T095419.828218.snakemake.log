Building DAG of jobs...
Using shell: /usr/bin/bash
Provided cores: 6
Rules claiming more threads will be scaled down.
Job stats:
job         count
--------  -------
all             1
clone           4
simulate        6
total          11

Select jobs to execute...

[Fri Jul 18 09:54:20 2025]
rule simulate:
    output: simulation_data/xfig5/nw_c1/nw_c1/n_pop_log_log.csv
    jobid: 5
    reason: Missing output files: simulation_data/xfig5/nw_c1/nw_c1/n_pop_log_log.csv; Code has changed since last execution; Params have changed since last execution
    wildcards: exp=xfig5, tr=nw_c1, sim=nw_c1
    resources: tmpdir=/tmp


[Fri Jul 18 09:54:20 2025]
rule simulate:
    output: simulation_data/xfig5/nw_c2/nw_c2/n_pop_log_log.csv
    jobid: 6
    reason: Missing output files: simulation_data/xfig5/nw_c2/nw_c2/n_pop_log_log.csv; Code has changed since last execution; Params have changed since last execution
    wildcards: exp=xfig5, tr=nw_c2, sim=nw_c2
    resources: tmpdir=/tmp


[Fri Jul 18 09:54:20 2025]
rule simulate:
    output: simulation_data/xfig2/s1/s1/n_pop_log_log.csv
    jobid: 1
    reason: Missing output files: simulation_data/xfig2/s1/s1/n_pop_log_log.csv
    wildcards: exp=xfig2, tr=s1, sim=s1
    resources: tmpdir=/tmp

[Fri Jul 18 09:54:20 2025]
Error in rule simulate:
    jobid: 5
    output: simulation_data/xfig5/nw_c1/nw_c1/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig5/nw_c1/nw_c1

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig5/nw_c1/nw_c1/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( basic --nrep=2 )

            # assemble the full command
            cmd=( python "simulation_scripts/multi_simulation.py"
                  "xfig5" "nw_c1" "nw_c1"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig5/nw_c1/nw_c1"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig5/nw_c1/nw_c1 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)


[Fri Jul 18 09:54:21 2025]
rule simulate:
    output: simulation_data/xfig5/nw_s1/nw_s1/n_pop_log_log.csv
    jobid: 4
    reason: Missing output files: simulation_data/xfig5/nw_s1/nw_s1/n_pop_log_log.csv; Code has changed since last execution; Params have changed since last execution
    wildcards: exp=xfig5, tr=nw_s1, sim=nw_s1
    resources: tmpdir=/tmp

[Fri Jul 18 09:54:21 2025]
Error in rule simulate:
    jobid: 6
    output: simulation_data/xfig5/nw_c2/nw_c2/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig5/nw_c2/nw_c2

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig5/nw_c2/nw_c2/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( basic --nrep=2 )

            # assemble the full command
            cmd=( python "simulation_scripts/multi_simulation.py"
                  "xfig5" "nw_c2" "nw_c2"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig5/nw_c2/nw_c2"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig5/nw_c2/nw_c2 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)


[Fri Jul 18 09:54:21 2025]
rule simulate:
    output: simulation_data/xfig4/rc1/rc1/n_pop_log_log.csv
    jobid: 3
    reason: Missing output files: simulation_data/xfig4/rc1/rc1/n_pop_log_log.csv
    wildcards: exp=xfig4, tr=rc1, sim=rc1
    resources: tmpdir=/tmp

[Fri Jul 18 09:54:21 2025]
Error in rule simulate:
    jobid: 1
    output: simulation_data/xfig2/s1/s1/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig2/s1/s1

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig2/s1/s1/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( basic --nrep=2 )

            # assemble the full command
            cmd=( python "simulation_scripts/main_simulation.py"
                  "xfig2" "s1" "s1"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig2/s1/s1"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig2/s1/s1 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)


[Fri Jul 18 09:54:21 2025]
rule simulate:
    output: simulation_data/xfig3/rc1/radius_0.05/n_pop_log_log.csv
    jobid: 2
    reason: Missing output files: simulation_data/xfig3/rc1/radius_0.05/n_pop_log_log.csv
    wildcards: exp=xfig3, tr=rc1, sim=radius_0.05
    resources: tmpdir=/tmp

[Fri Jul 18 09:54:21 2025]
Error in rule simulate:
    jobid: 4
    output: simulation_data/xfig5/nw_s1/nw_s1/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig5/nw_s1/nw_s1

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig5/nw_s1/nw_s1/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( basic --nrep=2 )

            # assemble the full command
            cmd=( python "simulation_scripts/multi_simulation.py"
                  "xfig5" "nw_s1" "nw_s1"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig5/nw_s1/nw_s1"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig5/nw_s1/nw_s1 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)

[Fri Jul 18 09:54:21 2025]
Error in rule simulate:
    jobid: 3
    output: simulation_data/xfig4/rc1/rc1/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig4/rc1/rc1

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig4/rc1/rc1/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( volume_sampling --rsc_cube_gen_vals=0 --nrep=2 --n_num=300 )

            # assemble the full command
            cmd=( python "simulation_scripts/main_simulation.py"
                  "xfig4" "rc1" "rc1"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig4/rc1/rc1"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig4/rc1/rc1 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)

[Fri Jul 18 09:54:21 2025]
Error in rule simulate:
    jobid: 2
    output: simulation_data/xfig3/rc1/radius_0.05/n_pop_log_log.csv
    shell:
        
        mkdir -p simulation_data/xfig3/rc1/radius_0.05

        # only run if the CSV really doesn't exist
        if [ ! -f "simulation_data/xfig3/rc1/radius_0.05/n_pop_log_log.csv" ]; then

            # build an array of flags
            sim_args=( metacom --radius=0.05 --rsc_cube_gen_vals=0 --nrep=2 --n_num=50 )

            # assemble the full command
            cmd=( python "simulation_scripts/main_simulation.py"
                  "xfig3" "rc1" "radius_0.05"
                  "${sim_args[@]}"
                  --outdir "simulation_data/xfig3/rc1/radius_0.05"
            )

            echo "[simulate] running: ${cmd[*]}"
            "${cmd[@]}"
        else
            echo "[simulate] skipping xfig3/rc1/radius_0.05 (already exists)"
        fi
        
        (one of the commands exited with non-zero exit code; note that snakemake uses bash strict mode!)

Shutting down, this might take some time.
Exiting because a job execution failed. Look above for error message
Complete log: .snakemake/log/2025-07-18T095419.828218.snakemake.log
